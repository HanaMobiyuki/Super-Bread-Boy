<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variables
grav = 0.2;
wallvsp = 2;
hsp = 0;
vsp = 0;
movespeed = 4;
jumps = 0;

move_lock = false;
grounded = false;

jumpsmax = 2;

jumpspeed_normal = 7;
jumpspeed_powerup = 10;

jumpspeed = jumpspeed_normal;

sound_global_volume(10);

if(global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_player;
move_lock = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_down = keyboard_check(vk_down);
key_restart = keyboard_check_pressed(ord("R"))
key_quit = keyboard_check_pressed(vk_escape)

//React to inputs

if move_lock = false
{
    move = key_left + key_right
}

if key_restart
{
    room_restart();
}

if key_quit
{
    game_end()
}

//Check Floor
if place_meeting(x, y + 1, obj_wall)
{
    vsp = key_jump * -jumpspeed;
    grounded = true
}
else
{
    grounded = false
}

hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

//If ground touched, jumps set to max
if(place_meeting(x,y+1,obj_wall))
{
    jumps = jumpsmax;
}

//Retire a jump count after a jump to the jumps variable
if (key_jump) &amp;&amp; (jumps &gt; 0)
{
    jumps -= 1;
    vsp = -jumpspeed;
}

//Slow sliding on walls
if place_meeting(x + 1, y, obj_wall) and grounded = false and vsp &gt; 1
{
    vsp = wallvsp;
}

if place_meeting(x - 1, y, obj_wall) and grounded = false and vsp &gt; 1
{
    vsp = wallvsp;
}

//Walljump with push
//If wall at left, so jump at right
if (key_jump) and place_meeting(x + 1, y, obj_wall) and grounded = false
{
    vsp = -jumpspeed;
    move = -1
    move_lock = true
    alarm[0] = 30 //Value that determinate the time player will be pushed in the other direction of the walljump
}
//If wall at right, jump at left
if (key_jump) and place_meeting(x - 1, y, obj_wall) and grounded = false
{
    vsp = -jumpspeed;
    move = 1
    move_lock = true
    alarm[0] = 30 // Same as above
}


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
